<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TIL on</title><link>https://disj11.github.io/tags/til/</link><description>Recent content in TIL on</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Thu, 22 Feb 2024 20:46:04 +0900</lastBuildDate><atom:link href="https://disj11.github.io/tags/til/index.xml" rel="self" type="application/rss+xml"/><item><title>.editorconfig 를 통한 코틀린 코드 스타일 설정</title><link>https://disj11.github.io/editorconfig/</link><pubDate>Thu, 22 Feb 2024 20:46:04 +0900</pubDate><guid>https://disj11.github.io/editorconfig/</guid><description>
&lt;p>ktlint 1.0 버전부터 ktlint 의 기본 설정이 &lt;code>ktlint_offcial&lt;/code> 로 변경되었다.
만약 다른 스타일을 사용하고 싶다면 &lt;code>.editorconfig&lt;/code> 의 &lt;code>ktlint_code_style&lt;/code> 을 통해 변경할 수 있다.&lt;/p>
&lt;pre tabindex="0">&lt;code>[*.{kt,kts}]
ktlint_code_style = intellij_idea # or android_studio or ktlint_official (default)
&lt;/code>&lt;/pre>&lt;p>특정 규칙을 비활성화하고 싶다면 &lt;code>ktlint_&lt;/code> prefix 와 rule set 의 id 를 사용하면 된다.
예를 들어 &lt;code>ktlint_offcial&lt;/code> 코드 스타일을 사용하면서 standard rule set 의 &lt;code>final-newline&lt;/code> 규칙을 비활성화 하고 싶다면 아래와 같이 설정할 수 있다.&lt;/p></description></item><item><title>Redis Del Command</title><link>https://disj11.github.io/redis-del-command/</link><pubDate>Fri, 20 Oct 2023 20:57:17 +0900</pubDate><guid>https://disj11.github.io/redis-del-command/</guid><description>
Redis DEL 명령어와 UNLINK 명령어의 차이와 lazyfree-lazy-user-del 옵션에 대한 설명</description></item><item><title>코틀린에서 JPA 사용시 ID 에 val 사용하기</title><link>https://disj11.github.io/jpa-val-id-in-kotlin/</link><pubDate>Fri, 15 Sep 2023 05:10:46 +0900</pubDate><guid>https://disj11.github.io/jpa-val-id-in-kotlin/</guid><description>
JPA 에서 ID 에 val 을 사용해도 save 이후 ID 가 잘 설정된다.</description></item><item><title>Shuffle Operation in Glue</title><link>https://disj11.github.io/shuffle-operation-in-glue/</link><pubDate>Wed, 10 May 2023 18:58:24 +0900</pubDate><guid>https://disj11.github.io/shuffle-operation-in-glue/</guid><description>
&lt;p>Glue workflow 사용중 3시간 정도 걸리는 Glue Job 이 발견되었다.
Worker 의 수를 10 -&amp;gt; 30 으로 올리니 17분 정도로 드라마틱하게 단축되어 왜 이런 현상이 발생하였는지 찾아보았다.&lt;/p>
&lt;p>Spark 에는 Shuffle Partition 이란 게 존재한다.
&lt;code>join&lt;/code>, &lt;code>groupBy&lt;/code> 등의 연산을 수행할 때 이 Shuffle Partition 이 사용된다.
이 Shuffle Partition 은 Spark의 성능에 가장 큰 영향을 미치는 Partition 이다.
연산에 쓰이는 메모리가 부족할 때 Shuffle Spill (데이터를 직렬화 하고 스토리지에 저장, 데이터 처리 이후에 역직렬화 후 연산 재개) 이 발생한다.
Shuffle Spill 이 일어나면, Task 가 지연되고 에러가 발생할 수 있다. 이 문제를 해결하기 위해서는 Core 당 메모리를 늘려야한다.&lt;/p></description></item><item><title>SQS Queue Types</title><link>https://disj11.github.io/sqs-queue-types/</link><pubDate>Sat, 06 May 2023 12:55:31 +0900</pubDate><guid>https://disj11.github.io/sqs-queue-types/</guid><description>
&lt;p>SQS 의 Queue type 에는 &lt;code>Standard&lt;/code> 와 &lt;code>FIFO&lt;/code> 가 있다.&lt;/p>
&lt;p>Standard queues 는 At-least-once delivery, Best-Effort Ordering 으로 작동한다.
At-least-once delivery 는 적어도 한번 메시지가 전달된다는 의미로 같은 메시지가 경우에 따라 두 번 이상 전달될 수 있다.
Best-Effort Ordering 은 경우에 따라 메시지의 순서가 보장되지 않는 것을 의미한다.
이러한 특성으로 Standard queues 를 사용하는 어플리케이션은 멱등성(idempotent) 을 보장해야 한다.
높은 처리량이 필요한 어플리케이션에 주로 사용한다.&lt;/p></description></item></channel></rss>