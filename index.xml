<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Life Log</title><link>https://disj11.github.io/</link><description>Recent content on Life Log</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Wed, 03 Nov 2021 21:21:49 +0900</lastBuildDate><atom:link href="https://disj11.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to SOLID Design Principles</title><link>https://disj11.github.io/posts/introduction-to-solid-design-principles/</link><pubDate>Wed, 03 Nov 2021 21:21:49 +0900</pubDate><guid>https://disj11.github.io/posts/introduction-to-solid-design-principles/</guid><description>
개요 # SOLID 란 Robert C.Martin 이 명명한 객체 지향 프로그래밍의 다섯 가지 설계 원칙이다. SOLID 는 다음을 의미한다.
S - Single-responsibility Principle (SRP: 단일 책임 원칙) O - Open-closed Principle (OCP: 개방-폐쇄 원칙) L - Liskov Substitution Principle (LSP: 리스코프 치환 원칙) I - Interface Segregation Principle (ISP: 인터페이스 분리 원칙) D - Dependency Inversion Principle (DIP: 의존 관계 역전 원칙) 이번 포스팅에서는 이 다섯 가지 원칙에 대해서 알아본다.</description></item><item><title>Http Client in Java</title><link>https://disj11.github.io/http-client-in-java/</link><pubDate>Tue, 02 Nov 2021 18:11:57 +0900</pubDate><guid>https://disj11.github.io/http-client-in-java/</guid><description>
개요 # 이전까지 자바에서 사용하던 HttpURLConnection 는 지원 수준이 너무 낮아 서드 파티 라이브러리인 Apache HttpClient, Jetty, 스프링의 RestTemplate 을 많이 사용하였다. 하지만 Java 11 에서 HTTP/2와 Web Socket 을 구현하는 HTTP Client API 의 표준화가 정식으로 도입되었다. 이번 포스팅에서는 Java 11 에서 채택된 HTTP Client API 표준화에 대해 알아본다.
변경점 (JEP 321) # Java 9 에서 도입되었던 HTTP API가 이제 공식적으로 Java SE API에 통합 되었다. 새로운 HTTP APIs 는 java.</description></item><item><title>Number Formatter in Java</title><link>https://disj11.github.io/number-formatter-in-java/</link><pubDate>Mon, 01 Nov 2021 20:00:12 +0900</pubDate><guid>https://disj11.github.io/number-formatter-in-java/</guid><description>
개요 # DecimalFormat은 미리 정의된 포맷을 사용하여 10진수 문자열 표현을 형식화 할 수 있는 NumberFormat 의 하위 클래스이다. 역으로 문자열을 숫자로 구문 분석하는 데 사용할 수도 있다. 이번 포스팅에서는 DecimalFormat 의 사용법을 알아본다.
패턴 문자 # 숫자를 어떤 형식으로 나타낼 지 지정하기 위해서는 먼저 패턴 문자를 알아야한다. 총 11가지 문자가 있지만, 네 가지만 알고 있으면 대부분의 상황에서 문제 없이 사용할 수 있다.
0 : 값이 제공되면 숫자를, 그렇지 않다면 0을 출력 # : 값이 제공되면 숫자를, 그렇지 않다면 아무것도 출력하지 않음 .</description></item><item><title>An Introduction to Oauth2</title><link>https://disj11.github.io/an-introduction-to-oauth2/</link><pubDate>Fri, 22 Oct 2021 10:08:30 +0900</pubDate><guid>https://disj11.github.io/an-introduction-to-oauth2/</guid><description>
소개 # OAuth는 오픈 API의 인증(authentication)과 권한 부여(authorization)를 제공하기 위해 만들어진 프로토콜이다. OAuth 1.0과 OAuth 2.0이 있는데, 현재는 RFC 5849에서 설명하는 OAuth 1.0을 폐기하고, RFC 6749에 설명된 OAuth 2.0 방식을 사용한다. 이번 포스팅에서는 OAuth 2.0에 관하여 알아본다.
역할 (Rules) # OAuth 2.0을 이해하기 위해서는 먼저 OAuth 2.0에서 정의하는 4가지 역할에 관하여 알아야한다.
Resource Owner (리소스 소유자) Resource Service (리소스 서버) Client (클라이언트) Authorization Server (인증 서버) 리소스 소유자는 보호된 리소스의 소유자를 말한다.</description></item><item><title>Date Time Formatter in Java</title><link>https://disj11.github.io/date-time-formatter-in-java/</link><pubDate>Wed, 29 Sep 2021 19:33:31 +0900</pubDate><guid>https://disj11.github.io/date-time-formatter-in-java/</guid><description>
개요 # Java8 에서 추가된 DateTimeFormatter 클래스에 대해 알아보자.
미리 정의된 인스턴스 # DateTimeFormatter 에는 ISO 및 RFC 표준을 따라 정의되어 있는 날짜/시간 포맷을 제공한다. 예를들어 ISO_LOCAL_DATE 인스턴스를 사용하여 다음과 같이 &amp;lsquo;2021-09-29&amp;rsquo; 와 같은 문자열을 얻을 수 있다.
LocalDate date = LocalDate.of(2021, 9, 29); DateTimeFormatter.ISO_LOCAL_DATE.format(date); // 2021-09-29 만약 &amp;lsquo;2021-09-29+09:00&amp;rsquo; 와 같이 오프셋을 포함한 문자열을 구하고 싶다면 ISO_OFFSET_DATE 를 사용한다.
LocalDate date = LocalDate.of(2021, 9, 29); DateTimeFormatter.ISO_OFFSET_DATE.format(date.atStartOfDay(ZoneId.of(&amp;#34;UTC+9&amp;#34;))); // 2021-09-29+09:00 FormatStyle의 사용 # 사람이 이해하기 쉽게 날짜를 보여주고 싶을때가 있다.</description></item></channel></rss>