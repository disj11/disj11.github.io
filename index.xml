<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://disj11.github.io/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Mon, 29 Sep 2025 21:35:21 +0900</lastBuildDate><atom:link href="https://disj11.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL 인덱스, 왜 컬럼 순서가 성능을 좌우할까?</title><link>https://disj11.github.io/mysql-index-and-range-conditions/</link><pubDate>Mon, 29 Sep 2025 21:35:21 +0900</pubDate><guid>https://disj11.github.io/mysql-index-and-range-conditions/</guid><description>
MySQL 다중 컬럼 인덱스를 생성할 때 컬럼 순서가 왜 중요한지 알아봅니다. 범위 조건(&gt;, &lt;, BETWEEN)이 인덱스 스캔에 미치는 영향을 이해하고, 이를 통해 쿼리 성능을 최적화하는 실용적인 방법을 설명합니다.</description></item><item><title>CSV 파일을 맥용 엑셀에서 볼 때 한글이 깨지는 문제</title><link>https://disj11.github.io/troubleshooting-for-csv-file-download/</link><pubDate>Sat, 18 Jan 2025 13:47:47 +0900</pubDate><guid>https://disj11.github.io/troubleshooting-for-csv-file-download/</guid><description>
CSV 파일 다운로드 기능을 구현할 때 발생하는 주요 문제들과 그 해결 방법을 다룹니다. 주요 내용으로는 한글 깨짐 문제 해결을 위한 BOM 문자 추가, 프론트엔드에서의 다운로드 문제 해결을 위한 'blob' 타입 지정, CSV 형식 오류 해결을 위한 특수 문자 처리 방법 등이 포함됩니다.</description></item><item><title>JetBrains Fleet에서 Kotest 사용하기</title><link>https://disj11.github.io/jetbrains-fleet-kotest/</link><pubDate>Sat, 18 Jan 2025 11:01:48 +0900</pubDate><guid>https://disj11.github.io/jetbrains-fleet-kotest/</guid><description>
JetBrains의 새로운 IDE인 Fleet은 IntelliJ와 달리 Kotest 플러그인을 기본적으로 지원하지 않습니다. 따라서 Kotest 테스트를 실행하려면 약간의 설정이 필요합니다. 이 글에서는 Gradle을 사용하여 Kotest 테스트를 실행하는 방법과 Fleet에서 테스트 실행을 편리하게 설정하는 방법을 소개합니다</description></item><item><title>Kotlin과 Jackson 사용 시 주의할 점</title><link>https://disj11.github.io/kotlin-jackson-primitive-type-null/</link><pubDate>Sat, 11 Jan 2025 16:40:31 +0900</pubDate><guid>https://disj11.github.io/kotlin-jackson-primitive-type-null/</guid><description>
Kotlin과 Jackson을 사용할 때 primitive 타입의 필드가 누락된 경우, 예기치 않은 동작이 발생할 수 있습니다. 이 글에서는 실제 사례와 테스트를 통해 이 문제를 재현하고, 다양한 해결 방안을 비교 분석합니다.</description></item><item><title>Hibernate Proxy 비정상 동작 사례 분석</title><link>https://disj11.github.io/inconsistent-hibernate-proxy-behavior-with-kotlin/</link><pubDate>Sun, 29 Dec 2024 21:36:18 +0900</pubDate><guid>https://disj11.github.io/inconsistent-hibernate-proxy-behavior-with-kotlin/</guid><description>
Kotlin 엔티티에서 동일 이름의 Getter 메서드로 인해 발생한 Hibernate Proxy의 비정상 동작 사례를 분석하고, 문제의 원인과 해결 방안을 제시합니다.</description></item><item><title>Ktlint: 기본 설정 변경 및 커스터마이징 가이드</title><link>https://disj11.github.io/editorconfig/</link><pubDate>Thu, 22 Feb 2024 20:46:04 +0900</pubDate><guid>https://disj11.github.io/editorconfig/</guid><description>
.editorconfig를 활용한 스타일 커스터마이징 방법을 알아봅니다. 특정 규칙 비활성화, IntelliJ 플러그인 사용법, 그리고 효율적인 코드 스타일 관리 팁을 제공합니다.</description></item><item><title>S3 Sink Connector Scheduled Rotation</title><link>https://disj11.github.io/s3-sink-connector-scheduled-rotation/</link><pubDate>Wed, 10 Jan 2024 16:42:15 +0900</pubDate><guid>https://disj11.github.io/s3-sink-connector-scheduled-rotation/</guid><description>
S3 Sink Connector에서 파일 로테이션을 설정하는 두 가지 주요 속성, rotate.interval.ms와 rotate.schedule.interval.ms의 차이점과 동작 방식을 비교합니다. 지속적인 데이터 유입 여부, Exactly-once delivery 보장 조건 등 꼭 알아야 할 내용을 알아봅니다.</description></item><item><title>Redis DEL 과 UNLINK 의 차이</title><link>https://disj11.github.io/redis-del-command/</link><pubDate>Fri, 20 Oct 2023 20:57:17 +0900</pubDate><guid>https://disj11.github.io/redis-del-command/</guid><description>
Redis DEL 명령어와 UNLINK 명령어의 차이와, lazyfree-lazy-user-del 옵션에 대해 설명합니다.</description></item><item><title>JIT Compiler</title><link>https://disj11.github.io/java-jit-compiler/</link><pubDate>Wed, 10 May 2023 23:56:05 +0900</pubDate><guid>https://disj11.github.io/java-jit-compiler/</guid><description>
JIT Compiler는 자바 코드 실행 속도를 획기적으로 향상시키는 JVM의 핵심 기술입니다. 이 글에서는 JIT Compiler의 작동 원리, Tiered Compilation, 임계값 설정 방법, 그리고 실제 성능 테스트를 통해 JIT의 효과를 자세히 살펴봅니다.</description></item><item><title>AWS SQS의 Queue 유형별 특성과 활용 방안</title><link>https://disj11.github.io/sqs-queue-types/</link><pubDate>Sat, 06 May 2023 12:55:31 +0900</pubDate><guid>https://disj11.github.io/sqs-queue-types/</guid><description>
SQS의 Standard Queue와 FIFO Queue의 주요 특성, 차이점, 그리고 각각의 활용 사례를 상세히 알아봅니다. 시스템 설계 시 고려해야 할 중요한 특성들을 중심으로 설명합니다.</description></item><item><title>메인 시퀀스로부터의 거리: 추상도와 불안정도를 활용한 아키텍처 평가</title><link>https://disj11.github.io/distance-from-the-main-sequence/</link><pubDate>Sun, 12 Mar 2023 14:09:09 +0900</pubDate><guid>https://disj11.github.io/distance-from-the-main-sequence/</guid><description>
소프트웨어 아키텍처에서 중요한 메트릭인 메인 시퀀스로부터의 거리를 중심으로, 이를 계산하는 데 사용되는 **추상도(abstractness)** 와 **불안정도(instability)** 의 개념과 계산 방법을 설명합니다. 또한, 메트릭의 시각적 표현을 통해 코드 품질을 평가하고 개선하는 방법을 다룹니다.</description></item><item><title>소프트웨어 응집도와 LCOM: 이해와 활용</title><link>https://disj11.github.io/cohesion-in-software-engineering/</link><pubDate>Sun, 12 Mar 2023 11:41:11 +0900</pubDate><guid>https://disj11.github.io/cohesion-in-software-engineering/</guid><description>
소프트웨어 설계의 핵심 개념인 **응집도(Cohesion)** 를 다양한 유형과 예시를 통해 쉽게 이해할 수 있도록 설명합니다. 또한, 클래스의 응집도를 정량적으로 평가하는 LCOM(Lack of Cohesion in Methods) 메트릭을 활용하여 설계 품질을 분석하고 개선하는 방법을 제시합니다.</description></item><item><title>확장성과 성능 최적화: 시스템 부하와 효율적인 대처 전략</title><link>https://disj11.github.io/what-you-need-to-know-first-for-scalability/</link><pubDate>Sun, 05 Feb 2023 12:15:15 +0900</pubDate><guid>https://disj11.github.io/what-you-need-to-know-first-for-scalability/</guid><description>
확장성이란 무엇인지부터 부하 매개변수와 성능 지표의 중요성, 그리고 꼬리 지연 시간과 효율적 자원 활용 전략까지, 시스템 확장성을 체계적으로 이해하고 최적화하는 방법을 알아봅니다.</description></item><item><title>Windows Initial Setup</title><link>https://disj11.github.io/notes/windows-initial-setup/</link><pubDate>Mon, 30 Jan 2023 09:10:13 +0900</pubDate><guid>https://disj11.github.io/notes/windows-initial-setup/</guid><description>
Windows 설치 후 초기 설정해야 하는 것들을 기록</description></item><item><title>Kotlin Iterable과 Sequence의 차이점과 활용법</title><link>https://disj11.github.io/memory-efficient-iterable-data-processing-with-sequences/</link><pubDate>Tue, 10 Jan 2023 23:59:43 +0900</pubDate><guid>https://disj11.github.io/memory-efficient-iterable-data-processing-with-sequences/</guid><description>
Kotlin의 Iterable과 Sequence는 컬렉션을 처리하는 두 가지 주요 방식으로, 즉시 평가와 지연 평가라는 서로 다른 전략을 사용합니다. 이 글에서는 두 방식의 차이점, 성능 비교, 적합한 사용 사례를 중심으로 효율적인 Kotlin 코드를 작성하는 방법을 알아봅니다.</description></item><item><title>Http Client in Java</title><link>https://disj11.github.io/http-client-in-java/</link><pubDate>Tue, 02 Nov 2021 18:11:57 +0900</pubDate><guid>https://disj11.github.io/http-client-in-java/</guid><description>
Java 11 에서 채택된 Http Client API 에 대하여</description></item><item><title>Number Formatter in Java</title><link>https://disj11.github.io/number-formatter-in-java/</link><pubDate>Mon, 01 Nov 2021 20:00:12 +0900</pubDate><guid>https://disj11.github.io/number-formatter-in-java/</guid><description>
간단한 예제를 통해 DecimalFormat 의 사용법을 알아보자.</description></item><item><title>Oauth2 에 대해서 알아보자</title><link>https://disj11.github.io/an-introduction-to-oauth2/</link><pubDate>Fri, 22 Oct 2021 10:08:30 +0900</pubDate><guid>https://disj11.github.io/an-introduction-to-oauth2/</guid><description>
OAuth 2.0 의 클라이언트 구현에 도움이 될 만한 정보를 위주로 OAuth 2.0 에 대하여 알아보자.</description></item><item><title>Date Time Formatter in Java</title><link>https://disj11.github.io/date-time-formatter-in-java/</link><pubDate>Wed, 29 Sep 2021 19:33:31 +0900</pubDate><guid>https://disj11.github.io/date-time-formatter-in-java/</guid><description>
Java 8 에서 추가된 DateTimeFormatter 클래스 사용법에 관한 간단한 정리</description></item><item><title>트랜잭션 격리 수준(Isolation Level)의 이해: 데이터 일관성과 성능의 균형</title><link>https://disj11.github.io/understanding-isolation-level-in-database-management/</link><pubDate>Tue, 28 Sep 2021 20:30:02 +0900</pubDate><guid>https://disj11.github.io/understanding-isolation-level-in-database-management/</guid><description>
트랜잭션 격리 수준은 데이터베이스에서 동시성 문제를 제어하고 데이터 일관성을 유지하기 위한 핵심 개념입니다. Dirty Read, Non-repeatable Read, Phantom Read 가 무엇인지 알아보고, 네 가지 주요 격리 수준(Read Uncommitted, Read Committed, Repeatable Read, Serializable)의 특징을 알아봅니다.</description></item><item><title>유니온 파인드</title><link>https://disj11.github.io/union-find/</link><pubDate>Wed, 05 Jun 2019 16:00:10 +0900</pubDate><guid>https://disj11.github.io/union-find/</guid><description>
유니온 파인드(Disjoint Set) 자료구조의 개념, 구현 방법, 경로 압축 최적화, 시간 복잡도를 자세히 설명합니다.</description></item></channel></rss>