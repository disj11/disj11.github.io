<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Life Log</title><link>https://disj11.github.io/</link><description>Recent content on Life Log</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Wed, 10 May 2023 23:56:05 +0900</lastBuildDate><atom:link href="https://disj11.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Java JIT Compiler</title><link>https://disj11.github.io/java-jit-compiler/</link><pubDate>Wed, 10 May 2023 23:56:05 +0900</pubDate><guid>https://disj11.github.io/java-jit-compiler/</guid><description>
JIT Compiler 란? # 자바 코드의 실행을 위해서는 바이트 코드로 컴파일이 필요하다. 바이트 코드는 다시 JVM 의 인터프리터를 통해 기계어로 해석되는 과정을 거쳐 실행된다. 이런</description></item><item><title>Shuffle Operation in Glue</title><link>https://disj11.github.io/shuffle-operation-in-glue/</link><pubDate>Wed, 10 May 2023 18:58:24 +0900</pubDate><guid>https://disj11.github.io/shuffle-operation-in-glue/</guid><description>
Glue workflow 사용중 3시간 정도 걸리는 Glue Job 이 발견되었다. Worker 의 수를 10 -&amp;gt; 30 으로 올리니 17분 정도로 드라마틱하게 단축되어 왜 이런 현상이 발생하였는지 찾아보았다. Spark 에</description></item><item><title>Sns Queue Types</title><link>https://disj11.github.io/sns-queue-types/</link><pubDate>Sat, 06 May 2023 12:55:31 +0900</pubDate><guid>https://disj11.github.io/sns-queue-types/</guid><description>
SQS 의 Queue type 에는 Standard 와 FIFO 가 있다. Standard queues 는 At-least-once delivery, Best-Effort Ordering 으로 작동한다. At-least-once delivery 는 적어도 한번 메시지가 전달된다는 의미로 같은 메시지가 경우에 따라 두 번 이상 전달될 수 있다. Best-Effort</description></item><item><title>메인 시퀀스로부터의 거리를 사용한 아키텍처 구조 평가</title><link>https://disj11.github.io/distance-from-the-main-sequence/</link><pubDate>Sun, 12 Mar 2023 14:09:09 +0900</pubDate><guid>https://disj11.github.io/distance-from-the-main-sequence/</guid><description>
메인 시퀀스로부터의 거리(distance from the main sequence)는 아키텍처 구조를 평가하는 몇 가지 메트릭중의 하나이다.</description></item><item><title>응집도를 측정할 수 있는 방법</title><link>https://disj11.github.io/cohesion-in-software-engineering/</link><pubDate>Sun, 12 Mar 2023 11:41:11 +0900</pubDate><guid>https://disj11.github.io/cohesion-in-software-engineering/</guid><description>
응집도란 무엇인지, 응집도를 측정할 수 있는 방법이 무엇인지에 대해 알아본다.</description></item><item><title>확장성을 위해 먼저 알아야할 사항</title><link>https://disj11.github.io/what-you-need-to-know-first-for-scalability/</link><pubDate>Sun, 05 Feb 2023 12:15:15 +0900</pubDate><guid>https://disj11.github.io/what-you-need-to-know-first-for-scalability/</guid><description>
확장성을 위해 먼저 알아야 할 사항들에는 무엇이 있을까?</description></item><item><title>Windows Initial Setup</title><link>https://disj11.github.io/notes/windows-initial-setup/</link><pubDate>Mon, 30 Jan 2023 09:10:13 +0900</pubDate><guid>https://disj11.github.io/notes/windows-initial-setup/</guid><description>
Windows 설치 후 초기 설정해야 하는 것들을 기록</description></item><item><title>Kotlin: Memory Efficient Iterable Data Processing with Sequences</title><link>https://disj11.github.io/en/memory-efficient-iterable-data-processing-with-sequences/</link><pubDate>Tue, 10 Jan 2023 23:59:43 +0900</pubDate><guid>https://disj11.github.io/en/memory-efficient-iterable-data-processing-with-sequences/</guid><description>
Let's find out how do they differ in behavior between Iterable and Sequence in Kotlin.</description></item><item><title>Kotlin: 시퀀스를 활용한 메모리 효율적인 데이터 처리 방법</title><link>https://disj11.github.io/memory-efficient-iterable-data-processing-with-sequences/</link><pubDate>Tue, 10 Jan 2023 23:59:43 +0900</pubDate><guid>https://disj11.github.io/memory-efficient-iterable-data-processing-with-sequences/</guid><description>
Kotlin에서 Iterable과 Sequence 간의 동작이 어떻게 다른지 알아보자.</description></item><item><title>Kotlin: 확장 함수의 수신 객체</title><link>https://disj11.github.io/nullable-receiver-in-extension-functions-of-kotlin/</link><pubDate>Sun, 08 Jan 2023 21:22:27 +0900</pubDate><guid>https://disj11.github.io/nullable-receiver-in-extension-functions-of-kotlin/</guid><description>
확장 함수의 수신 객체는 null 값이 될 수 있다.</description></item><item><title>Nullable Receiver in Extension Functions of Kotlin</title><link>https://disj11.github.io/en/nullable-receiver-in-extension-functions-of-kotlin/</link><pubDate>Sun, 08 Jan 2023 21:22:27 +0900</pubDate><guid>https://disj11.github.io/en/nullable-receiver-in-extension-functions-of-kotlin/</guid><description>
The receiver object in extension functions allows null value.</description></item><item><title>Kotlin에서 데이터 클래스를 사용할 때 주의할 점</title><link>https://disj11.github.io/notes-on-using-data-classes-in-kotlin/</link><pubDate>Sun, 08 Jan 2023 14:39:00 +0900</pubDate><guid>https://disj11.github.io/notes-on-using-data-classes-in-kotlin/</guid><description>
Kotlin에서 데이터 클래스를 주의해야 할 사항이 있다. 데이터 클래스는 자동으로 copy() 함수를 생성하는데, 이 함수를 통해 속성값을 수정한 새로운 인스턴스를 생성</description></item><item><title>Notes on Using Data Classes in Kotlin</title><link>https://disj11.github.io/en/notes-on-using-data-classes-in-kotlin/</link><pubDate>Sun, 08 Jan 2023 14:39:00 +0900</pubDate><guid>https://disj11.github.io/en/notes-on-using-data-classes-in-kotlin/</guid><description>
Take note of the copy() function When using data classes in Kotlin</description></item><item><title>SOLID Design Principles</title><link>https://disj11.github.io/introduction-to-solid-design-principles/</link><pubDate>Wed, 03 Nov 2021 21:21:49 +0900</pubDate><guid>https://disj11.github.io/introduction-to-solid-design-principles/</guid><description>
객체 지향 프로그래밍의 다섯 가지 설계 원칙인 SOLID 에 대하여 간단한 예제를 통해 알아본다.</description></item><item><title>Http Client in Java</title><link>https://disj11.github.io/http-client-in-java/</link><pubDate>Tue, 02 Nov 2021 18:11:57 +0900</pubDate><guid>https://disj11.github.io/http-client-in-java/</guid><description>
Java 11 에서 채택된 Http Client API 에 대하여</description></item><item><title>Number Formatter in Java</title><link>https://disj11.github.io/number-formatter-in-java/</link><pubDate>Mon, 01 Nov 2021 20:00:12 +0900</pubDate><guid>https://disj11.github.io/number-formatter-in-java/</guid><description>
간단한 예제를 통해 DecimalFormat 의 사용법을 알아보자.</description></item><item><title>Oauth2 에 대해서 알아보자</title><link>https://disj11.github.io/an-introduction-to-oauth2/</link><pubDate>Fri, 22 Oct 2021 10:08:30 +0900</pubDate><guid>https://disj11.github.io/an-introduction-to-oauth2/</guid><description>
OAuth 2.0 의 클라이언트 구현에 도움이 될 만한 정보를 위주로 OAuth 2.0 에 대하여 알아보자.</description></item><item><title>Date Time Formatter in Java</title><link>https://disj11.github.io/date-time-formatter-in-java/</link><pubDate>Wed, 29 Sep 2021 19:33:31 +0900</pubDate><guid>https://disj11.github.io/date-time-formatter-in-java/</guid><description>
Java 8 에서 추가된 DateTimeFormatter 클래스 사용법에 관한 간단한 정리</description></item><item><title>Isolation Level 에 대해 알아보자</title><link>https://disj11.github.io/understanding-isolation-level-in-database-management/</link><pubDate>Tue, 28 Sep 2021 20:30:02 +0900</pubDate><guid>https://disj11.github.io/understanding-isolation-level-in-database-management/</guid><description>
데이터베이스의 격리 수준(Isolation Level)에 대하여</description></item></channel></rss>